Interface:
->  Tipo abstrato que define um contrato que uma classe deve implementar
    Não pode ser instanciadas
    -   Impossivel: new Interface();
    Metodos são publicos e abstratos por padrão
    Atributos são constantes
    -   Todos são public static final
    Suporte a herança multipla

    Ex:
    public interface Pagavel{
        double calcularPagamento();

        default void imprime(double valor){
            print("RECIBO: " + valor);
        }
    }

    Ex Classe Funcionario:
    public class Funcionario implements Pagavel{
        private String nome;
        private double salario;
        private int horas;
        
        public Funcionario(String nome, double salario, int horas) {
            this.nome = nome;
            this.salario = salario;
            this.horas = horas;
        }

        @Override
        public double calcularPagamento(){
            return salario * horas
        }
    }

    Ex: Classe Fornecedor
    public class Fornecedor implements Pagavel{
        private String nome;
        private double valorContrato;

        public Fornecedor(String nome, double valorContrato) {
            this.nome = nome;
            this.valorContrato = valorContrato;
        }

        @Override
        public double calcularPagamento(){
            return valorContrato
        }
    }

    Ex: Main
    public main(String[] args){
        Pagavel funcionario = new Funcionario("Joao", 50.0, 160);
        Pagavel fornecedor = new Fornecedor("Empresa", 1000.0);
        
        double valor = funcionario.calcularPagamento();
        funcionario.imprime(valor);

        double valor2 = fornecedor.calcularPagamento();
        fornecedor.imprime(valor2);
    }

Interface:
->  Todos os metodos na interface são implicitamente abstract e public e, não podem ser declaradas em seus corpos.
    Campos, se houver serão implicitamente considerados static e final

Classe x Interface:
->  Interface são mecanismo de herança multipla, permitindo que mais de uma interface determine os metodos de uma classe herdeira deve implementar
